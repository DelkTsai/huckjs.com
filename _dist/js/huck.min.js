(function (exports) {
'use strict';

/*

  FILE:
  Performance

  DESCRIPTION:
  Utilities for measuring & reporting performance stats

*/

class Performance {

  constructor() {
    this.endTime = null;
    this.startTime = null;
  }

  start() {
    this.startTime = this.snapshot();
    return this.startTime;
  }

  stop() {
    this.endTime = this.snapshot();
    return {
      end: this.endTime,
      start: this.startTime,
      loadtime: this.timer()
    };
  }

  snapshot() {
    return performance.now();
  }

  timer(time) {
    let ms = this.endTime - this.startTime,
        sec = Math.round(ms / 1000);

    if (sec === 0) {
      return `${Math.round(ms)}ms`;
    } else {
      return `${sec}s`;
    }
  }

}

/*

  FILE:
  settings Bootstrapper

  DESCRIPTION:
  Creates custom DOM elements & populates css & template data

*/

let performance$1 = new Performance();
let bootstrapTries = 0;
let retries = 0;

function Component(component, settings) {

  performance$1.start();

  if (typeof component.name === 'undefined') {
    setTimeout(() => {
      bootstrapTries++;
      addComponent(component, settings);
    }, 50);
  } else if (bootstrapTries < 100) {
    addComponent(component, settings);
  }
}

function isLoaded(el, outlet, cb) {
  if (el && el.parentElement === outlet) {
    cb();
  } else if (retries < 10) {
    retries++;
    setTimeout(() => {
      isLoaded(el, outlet, cb);
    }, 10);
  }

}

function addComponent(component, settings) {

  let el = document.querySelector(settings.selector),
      Huck = component.parent || component,
      outlet = document.querySelector('router-outlet'),
      shadow = settings.shadow || true;

  // RENDERED
  isLoaded(el, outlet, () => {
    if (!settings.template && !settings.template) shadow = false;
    render(component, settings, shadow);
  });


  // ADD SETTINGS
  // delete component.parent;
  component.css = settings.css || null;
  component.selector = settings.selector || null;
  component.template = settings.template(component) || null;
  Huck.components[component.name] = component;
}

function render(component, settings) {
  create(component, settings, shadow);
}

function shadow(el, component, settings) {
  let css = '';

  if (settings.css) css = `<style>${settings.css}</style>`;

  el.attachShadow({mode: 'open'}).innerHTML = `
    ${css}
    ${settings.template(component)}
  `;
}

// CREATE A CUSTOM ELEMENT
function create(component, settings, shadow) {
  customElements.define(settings.selector, class extends HTMLElement {

    // CREATE SHADOW DOM
    constructor() {
      super();

      if (settings.template) {
        shadow(this, component, settings);
      }

      this.style.display = 'none';

    }

  });

  component.selector = settings.selector;
  component.loadtime = performance$1.stop().loadtime;
  component.ready = true;

  delete component.parent;

  if (component.onInit) component.onInit();

}

/*

  FILE:
  Event Emitter

  DESCRIPTION:
  Simple event listener & emitter

*/

class Emitter {

  constructor() {
    this.observers = [];
  }

  on (observer, cb) {
    this.observers.push({
      observer: observer,
      cb: cb
    });
  }

  emit (to) {
    this.observers.forEach((observer) => {
      if (observer.observer === to) observer.cb();
    });
  }

}

/*

  FILE:
  Logger

  DESCRIPTION:
  Logging functions

*/

class Logger {

  constructor(enabled) {
    this.enabled = enabled;
  }

  error (what) {
    if (this.enabled) console.error(what);
  }

  info (what) {
    if (this.enabled) console.info(what);
  }

  log (what) {
    if (this.enabled) console.log(what);
  }

  warn (what) {
    if (this.enabled) console.warn(what);
  }

}

/*

  FILE:
  Huck Core - @huck/core

  DESCRIPTION:
  Core bootrapping & utility methods

*/


// INTERNAL IMPORTS
class Huck {

  constructor(config) {
    this.emitter = new Emitter();
    this.setConfig(config);
  }

  // Enable LiveReload
  enableLiveReload() {
    if (!this.production && this.config.livereload) {
      this.liveReloadStarted = true;
      this.logger.log('Enabling live reload...');
      document.write('<script src="http://localhost:35729/livereload.js?snipver=1"></script>');
    }
  }

  enableProd() {
    this.production = true;

    // ENSURE LIVE-RELOAD IS REMOVED
    for (let i = 0; i < document.scripts.length; i++) {
      let el = document.scripts[i];
      if (el.src === 'http://localhost:35729/livereload.js?snipver=1') {
        setTimeout(() => { el.remove(); }, 500);
      }
    }

  }

  // BOOTSTRAP THE APPLICATION
  bootstrap(settings) {
    this.loadedComponents = 0;
    this.requestedComponents = settings.components.length;
    this.loadComponents(settings.components);

    this.emitter.on('ready', () => {
      if (settings.router) {
        this.router = settings.router;
      }
    });

  }

  // LOAD ALL OF OUR COMPONENTS
  loadComponents(components) {

    components.forEach((Comp) => {
      let Temp = new Comp(this);

      if (typeof Temp.name === 'undefined') {
        Temp.name = Temp.constructor.name;
      }

      Temp.parent = this;
      Temp.logger = this.logger;

    });

  }

  // CONTENT LOAD EVENT
  domLoad(cb) {
    document.addEventListener('DOMContentLoaded', cb);
  }

  // ONCE THE APP IS FULLY INITIALIZED
  onReady(cb) {

    this.enableLiveReload(); // ATTEMPT TO ENABLE LIVE RELOAD

    // ONCE EVERYTHING IS LOADED
    this.emitter.on('ready', () => {

      this.loadtime = this.performance.stop().loadtime; // SAVE FINAL LOAD TIME

      // IF ROUTER IS ENABLED
      if (this.router && this.router.name === '@huck/router') {
        this.router.populate();

        this.activeRoute = this.router.activeRoute();

        this.renderComponent(this.router.activeRoute());

        // ON NAVIGATE
        this.router.onNavigate((route) => {
          this.router.populate(); // pupulate links
          this.activeRoute = route;
          this.renderComponent(route);
        });
      }
      cb();
    });
  }

  // RENDER A COMPONENT WHEN ROUTER ACTIVATES
  renderComponent() {
    let errored = false,
        matched = false,
        outlet = document.querySelector('router-outlet'),
        route = this.activeRoute;

    // HIDE ROUTER OUTLET ON NAGIVATION
    if (outlet) {
      outlet.style.display = 'none';
      let comps = outlet.children;

      for (let i = 0; i < comps.length; i++) {
        comps[i].style.display = 'none';
      }
    }

    this.router.routes.forEach((r) => {
      if (route === r.path) {
        if (this.components[r.component]) {
          let el = document.querySelector(this.components[r.component].selector);
          if (outlet) this.unHide(outlet);
          if (el) this.unHide(el);
          matched = true;

        // IF WE FAILED TO FIND A COMPONENT FOR THE ROUTE
        } else {
          errored = true;
          this.logger.error(`Router Error: Could not find ${r.component} component.`);
          this.throwError();
        }

      }

    });

    // IF ROUTE DOESN'T SPECIFY A COMPONENT
    if (!matched && !errored) {
      this.logger.error(`Router Error: ${route} did not match any component.`);
      this.throwError();
    }
  }

  // UNHIDE CONTAINER
  unHide(el) {
    if (el) {
      el.style.display = 'block';
      setTimeout(() => { el.style.display = 'block'; }, 10);
      if (el.style.display === 'none') setTimeout(() => { this.unHide(el); }, 10);
    }

  }

  throwError() {

    let component = this.components.DefaultErrorComponent;
    if (component) {
      console.log('Render Default Error Component', component);
      let el = document.querySelector(component.selector);
      if (el) this.unHide(el);
    }
  }

  // CHECK THAT ALL COMPONENTS HAVE LOADED
  checkComponents() {

    let keys = Object.keys(this.components);

    // BE SURE ALL COMPONENTS ARE ACCOUNTED FOR
    if (typeof this.components !== 'undefined' && keys.length === this.requestedComponents) {

      keys.forEach((key) => {

        let component = this.components[key];

        // IF COMPONENT IS LOADED
        if (component.ready) {
          this.loadedComponents = this.loadedComponents + 1;
          if (this.loadedComponents === this.requestedComponents) {
            this.emitter.emit('ready');
          } else {
            setTimeout(() => {
              this.retries++;
              this.checkComponents();
            }, 50);
          }
        } else {
          if (this.retries < this.retryLimit) {
            setTimeout(() => {
              this.retries++;
              this.checkComponents();
            }, 50);
          } else {
            this.logger.error(`Failed to load ${component.name} after ${(500 * this.retryLimit) / 1000} seconds`);
          }
        }
      });

    // IF WE'RE STILL WAITING ON A COMPONENT
    } else {
      if (this.retries < this.retryLimit) {
        setTimeout(() => {
          this.retries++;
          this.checkComponents();
        }, 50);
      }
    }
  }

  // SET ALL OUR CONFIG VALUES
  setConfig(userConfig) {

    // SHARED VARS
    this.components = [];
    this.config = {};
    this.liveReloadStarted = false;
    this.config.logging = true;
    this.name = 'Huck';
    this.performance = new Performance();
    this.performance.start();
    this.production = false;
    this.retries = 0;
    this.retryLimit = 50;

    // CONFIG VARS
    this.config.livereload = true;

    if (typeof userConfig !== 'undefined') {
      if (typeof userConfig.name !== 'undefined') this.name = userConfig.name;
      if (typeof userConfig.livereload !== 'undefined') this.config.livereload = userConfig.livereload;
      if (typeof userConfig.logging !== 'undefined') this.config.logging = userConfig.logging;
      if (typeof userConfig.production !== 'undefined') this.production = userConfig.production;
    }

    if (this.production) this.config.logging = false;

    this.logger = new Logger(this.config.logging);

    this.checkComponents();

  }
}

let Dom = {

  active: function() {
    return document.activeElement;
  },

  findChildren: function(of) {
    if (of.children.length > 0) {
      return of.children;
    } else {
      return false;
    }
  },

  parseAttr(el, attr) {
    if (el.getAttribute(attr)) {
      return {
        el: el,
        attr: el.getAttribute(attr)
      };
    } else {
      return false;
    }
  },

  // RETURN LIST OF ELEMENTS WITH AN ATTR
  getAttributes: function(which) {

    return new Promise((resolve, reject) => {

      let matches = [],
          body = this.el('body');

      if (body && body.children) {

        body = body.children;

        // CLONE ATTRIBUTES
        for (let i = 0; i < body.length; i++) {

          let again = this.findChildren(body[i]),
              el = body[i],
              parse = this.parseAttr(el, which),
              shadow = this.shadow(el);

          // ADD TO LIST OF MATCHES
          if (parse) matches.push(parse);

          if (again) {
            for (let child = 0; child < again.length; child++) {
              parse = this.parseAttr(again[child], which);
              if (parse) matches.push(parse);
              let againShadow = this.shadow(again[child]);
              if (againShadow) {
                let shadowChild = againShadow.children;
                for (let child = 0; child < shadowChild.length; child++) {
                  parse = this.parseAttr(shadowChild[child], which);
                  if (parse) matches.push(parse);
                }
              }
            }
          }

          // IF ITEM HAS A SHADOW DOM, LOOK INSIDE
          if (shadow) {
            let children = shadow.children;
            for (let child = 0; child < children.length; child++) {
              parse = this.parseAttr(children[child], which);
              if (parse) matches.push(parse);
            }
          }

        }

        resolve(matches);

      } else {
        setTimeout(() => {
          this.getAttributes(which).then((matches) => {
            resolve(matches);
          });
        }, 100);
      }
    });

  },

  // CHECK IF ITEM HAS A SHADOW DOM
  shadow: function(el) {
    return el.shadowRoot;
  },

  children: function(el) {
    return el.children;
  },

  designMode: function(set) {
    if (arguments[0]) {
      document.designMode = set;
      return document.designMode;
    } else {
      return document.designMode;
    }
  },

  domain: function() {
    return document.domain;
  },

  forms: function() {
    return document.forms;
  },

  el: function(el) {
    return document.querySelector(el);
  },

  head: function() {
    return document.head;
  },

  html: function(el, content) {
    el.innerHTML = content;
  },

  images: function() {
    return document.images;
  },

  links: function() {
    return document.links;
  },

  loaded: function(cb) {
    document.addEventListener('DOMContentLoaded', cb);
  },

  modified: function() {
    return document.lastModified;
  },

  navigate: function(url, target) {
    if (arguments[1]) {
      window.open(url, target);
    } else {
      window.location = url;
    }
  },

  query: function(el) {
    return document.querySelector(el);
  },

  url() {
    return document.URI;
  },

  visible() {
    return document.visibilityState;
  }

};

/*

  FILE:
  Event Emitter

  DESCRIPTION:
  Simple event listener & emitter

*/

class Router {

  constructor(routes) {
    this.emitter = new Emitter();
    this.buildLinks();

    this.name = '@huck/router';

    this.routes = routes || [];

    // WHEN HISTORY CHANGES, EMIT NAVIGATE EVENT
    window.onpopstate = () => {
      this.emitter.emit('navigate');
    };
  }

  add(route) {
    this.routes.push(route);
  }

  populate() {
    setTimeout(() => {
      this.buildLinks();
    }, 2000);
  }

  // GET A LIST OF ROUTER LINKS
  buildLinks() {

    Dom.getAttributes('[navigate]').then((data) => {
      data.forEach((match) => {
        match.el.onclick = (e) => {
          if (match.attr === '/') match.attr = '';
          e.preventDefault();
          this.go(`/${match.attr}`);
        };
      });
    });

  }

  onNavigate(cb) {
    this.emitter.on('navigate', () => {
      cb(this.activeRoute());
    });
  }

  activeRoute() {
    return window.location.pathname;
  }

  go(to) {
    to = to.split('//').join('/');
    let stateObj = {};
    history.pushState(stateObj, null, to);
    this.emitter.emit('navigate');
  }

}

var pug = ((function(exports){
  'use strict';

  var pug_has_own_property = Object.prototype.hasOwnProperty;

  /**
   * Merge two attribute objects giving precedence
   * to values in object `b`. Classes are special-cased
   * allowing for arrays and merging/joining appropriately
   * resulting in a string.
   *
   * @param {Object} a
   * @param {Object} b
   * @return {Object} a
   * @api private
   */

  exports.merge = pug_merge;
  function pug_merge(a, b) {
    if (arguments.length === 1) {
      var attrs = a[0];
      for (var i = 1; i < a.length; i++) {
        attrs = pug_merge(attrs, a[i]);
      }
      return attrs;
    }

    for (var key in b) {
      if (key === 'class') {
        var valA = a[key] || [];
        a[key] = (Array.isArray(valA) ? valA : [valA]).concat(b[key] || []);
      } else if (key === 'style') {
        var valA = pug_style(a[key]);
        var valB = pug_style(b[key]);
        a[key] = valA + (valA && valB && ';') + valB;
      } else {
        a[key] = b[key];
      }
    }

    return a;
  }

  /**
   * Process array, object, or string as a string of classes delimited by a space.
   *
   * If `val` is an array, all members of it and its subarrays are counted as
   * classes. If `escaping` is an array, then whether or not the item in `val` is
   * escaped depends on the corresponding item in `escaping`. If `escaping` is
   * not an array, no escaping is done.
   *
   * If `val` is an object, all the keys whose value is truthy are counted as
   * classes. No escaping is done.
   *
   * If `val` is a string, it is counted as a class. No escaping is done.
   *
   * @param {(Array.<string>|Object.<string, boolean>|string)} val
   * @param {?Array.<string>} escaping
   * @return {String}
   */
  exports.classes = pug_classes;
  function pug_classes_array(val, escaping) {
    var classString = '', className, padding = '', escapeEnabled = Array.isArray(escaping);
    for (var i = 0; i < val.length; i++) {
      className = pug_classes(val[i]);
      if (!className) continue;
      escapeEnabled && escaping[i] && (className = pug_escape(className));
      classString = classString + padding + className;
      padding = ' ';
    }
    return classString;
  }
  function pug_classes_object(val) {
    var classString = '', padding = '';
    for (var key in val) {
      if (key && val[key] && pug_has_own_property.call(val, key)) {
        classString = classString + padding + key;
        padding = ' ';
      }
    }
    return classString;
  }
  function pug_classes(val, escaping) {
    if (Array.isArray(val)) {
      return pug_classes_array(val, escaping);
    } else if (val && typeof val === 'object') {
      return pug_classes_object(val);
    } else {
      return val || '';
    }
  }

  /**
   * Convert object or string to a string of CSS styles delimited by a semicolon.
   *
   * @param {(Object.<string, string>|string)} val
   * @return {String}
   */

  exports.style = pug_style;
  function pug_style(val) {
    if (!val) return '';
    if (typeof val === 'object') {
      var out = '', delim = '';
      for (var style in val) {
        /* istanbul ignore else */
        if (pug_has_own_property.call(val, style)) {
          out = out + delim + style + ':' + val[style];
          delim = ';';
        }
      }
      return out;
    } else {
      val = '' + val;
      if (val[val.length - 1] === ';') return val.slice(0, -1);
      return val;
    }
  }

  /**
   * Render the given attribute.
   *
   * @param {String} key
   * @param {String} val
   * @param {Boolean} escaped
   * @param {Boolean} terse
   * @return {String}
   */
  exports.attr = pug_attr;
  function pug_attr(key, val, escaped, terse) {
    if (val === false || val == null || !val && (key === 'class' || key === 'style')) {
      return '';
    }
    if (val === true) {
      return ' ' + (terse ? key : key + '="' + key + '"');
    }
    if (typeof val.toJSON === 'function') {
      val = val.toJSON();
    }
    if (typeof val !== 'string') {
      val = JSON.stringify(val);
      if (!escaped && val.indexOf('"') !== -1) {
        return ' ' + key + '=\'' + val.replace(/'/g, '&#39;') + '\'';
      }
    }
    if (escaped) val = pug_escape(val);
    return ' ' + key + '="' + val + '"';
  }

  /**
   * Render the given attributes object.
   *
   * @param {Object} obj
   * @param {Object} terse whether to use HTML5 terse boolean attributes
   * @return {String}
   */
  exports.attrs = pug_attrs;
  function pug_attrs(obj, terse){
    var attrs = '';

    for (var key in obj) {
      if (pug_has_own_property.call(obj, key)) {
        var val = obj[key];

        if ('class' === key) {
          val = pug_classes(val);
          attrs = pug_attr(key, val, false, terse) + attrs;
          continue;
        }
        if ('style' === key) {
          val = pug_style(val);
        }
        attrs += pug_attr(key, val, false, terse);
      }
    }

    return attrs;
  }

  /**
   * Escape the given string of `html`.
   *
   * @param {String} html
   * @return {String}
   * @api private
   */

  var pug_match_html = /["&<>]/;
  exports.escape = pug_escape;
  function pug_escape(_html){
    var html = '' + _html;
    var regexResult = pug_match_html.exec(html);
    if (!regexResult) return _html;

    var result = '';
    var i, lastIndex, escape;
    for (i = regexResult.index, lastIndex = 0; i < html.length; i++) {
      switch (html.charCodeAt(i)) {
        case 34: escape = '&quot;'; break;
        case 38: escape = '&amp;'; break;
        case 60: escape = '&lt;'; break;
        case 62: escape = '&gt;'; break;
        default: continue;
      }
      if (lastIndex !== i) result += html.substring(lastIndex, i);
      lastIndex = i + 1;
      result += escape;
    }
    if (lastIndex !== i) return result + html.substring(lastIndex, i);
    else return result;
  }

  /**
   * Re-throw the given `err` in context to the
   * the pug in `filename` at the given `lineno`.
   *
   * @param {Error} err
   * @param {String} filename
   * @param {String} lineno
   * @param {String} str original source
   * @api private
   */

  exports.rethrow = pug_rethrow;
  function pug_rethrow(err, filename, lineno, str){
    if (!(err instanceof Error)) throw err;
    if ((typeof window != 'undefined' || !filename) && !str) {
      err.message += ' on line ' + lineno;
      throw err;
    }
    try {
      str = str || require('fs').readFileSync(filename, 'utf8');
    } catch (ex) {
      pug_rethrow(err, null, lineno);
    }
    var context = 3
      , lines = str.split('\n')
      , start = Math.max(lineno - context, 0)
      , end = Math.min(lines.length, lineno + context);

    // Error context
    var context = lines.slice(start, end).map(function(line, i){
      var curr = i + start + 1;
      return (curr == lineno ? '  > ' : '    ')
        + curr
        + '| '
        + line;
    }).join('\n');

    // Alter exception message
    err.path = filename;
    err.message = (filename || 'Pug') + ':' + lineno
      + '\n' + context + '\n\n' + err.message;
    throw err;
  }

  return exports
}))({});

var template = function(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var pug_debug_filename, pug_debug_line;try {var pug_debug_sources = {};
var locals_for_with = (locals || {});(function (message) {
pug_html = pug_html + "\u003Ch2 [navigate]=\"\u002F\"\u003E";
pug_html = pug_html + (pug.escape(null == (pug_interp = message) ? "" : pug_interp)) + "\u003C\u002Fh2\u003E";
}.call(this,"message" in locals_for_with?locals_for_with.message:typeof message!=="undefined"?message:undefined));} catch (err) {pug.rethrow(err, pug_debug_filename, pug_debug_line, pug_debug_sources[pug_debug_filename]);}return pug_html;};

var styles = "h2 {\n  font-size: 15px;\n  font-weight: 300;\n  color: rgba(0, 0, 0, 0.3);\n  margin: 0; }\n";

class TestComponent {

  constructor() {

    this.message = 'Coming soon.';

    Component(this, {
      css: styles,
      template: template,
      selector: 'test-component'
    });

  }

  onInit() {
    this.logger.log(`${this.name} initialized: ${this.loadtime}`);
  }

}

var template$1 = function(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var pug_debug_filename, pug_debug_line;try {var pug_debug_sources = {};
pug_html = pug_html + "\u003Ch2\u003E";
pug_html = pug_html + "Lightweight JavaScript Framework\u003C\u002Fh2\u003E";} catch (err) {pug.rethrow(err, pug_debug_filename, pug_debug_line, pug_debug_sources[pug_debug_filename]);}return pug_html;};

var styles$1 = ":host h2 {\n  font-size: 15px;\n  font-weight: 300;\n  color: rgba(0, 0, 0, 0.3);\n  margin: 0; }\n";

class DefaultComponent {

  constructor() {

    Component(this, {
      css: styles$1,
      template: template$1,
      selector: 'home-component'
    });

  }

  onInit() {
    this.logger.log(`${this.name} initialized: ${this.loadtime}`);
  }

}

var template$2 = function(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var pug_debug_filename, pug_debug_line;try {var pug_debug_sources = {};
var locals_for_with = (locals || {});(function (message, title) {
pug_html = pug_html + "\u003Ch1\u003E";
pug_html = pug_html + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh1\u003E";
pug_html = pug_html + "\u003Ch2\u003E";
pug_html = pug_html + (pug.escape(null == (pug_interp = message) ? "" : pug_interp)) + "\u003C\u002Fh2\u003E";
}.call(this,"message" in locals_for_with?locals_for_with.message:typeof message!=="undefined"?message:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));} catch (err) {pug.rethrow(err, pug_debug_filename, pug_debug_line, pug_debug_sources[pug_debug_filename]);}return pug_html;};

var styles$2 = "h1 {\n  color: #c00; }\n";

class DefaultErrorComponent {

  constructor() {

    this.title = 'Error!';
    this.message = '404 Page not found';

    Component(this, {
      css: styles$2,
      template: template$2,
      selector: 'error-component'
    });

  }

  onInit() {
    this.logger.log(`${this.name} initialized: ${this.loadtime}`);
  }

}

// LIBS

// TUPACCA
// COMPONENTS
let App = new Huck({
  // name: 'Awesome sauce',
  // livereload: true,
  logging: true,
  production: false
});

App.bootstrap({
  components: [
    DefaultComponent,
    DefaultErrorComponent,
    TestComponent
  ]
});

App.onReady(() => {
  App.logger.log(`${App.name} loaded: ${App.loadtime}`);
});

App.router = new Router([
  {
    component: 'TestComponent',
    name: 'test-component',
    path: '/test'
  },
  {
    component: 'DefaultErrorComponent',
    name: 'error-component'
  }
]);

App.router.add({
  component: 'DefaultComponent',
  name: 'home',
  path: '/'
});

exports.Huck = App;

}((this.App = this.App || {})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
